import React from 'react'
import { useState } from 'react'

const Note = (props) => {
  const { x, y, type, step } = props
  const [color, setColor] = useState('black')

  const tmp = 10

  const ledgerLines = () => {
    const arr = []
    if (step > 5) {
      var start = 6
      var change = 2
    } else if (step < -5) {
      var start = -6
      var change = -2
    } else {
      return []
    }
    for (let i = 6*step/Math.abs(step); Math.abs(i) <= Math.abs(step); i+=change) {
      arr.push(
        <polyline className="LedgerLine" fill="none" stroke={color} strokeWidth="3.97" strokeLinejoin="bevel" points={`${513.182+x},${435.827-i*12.4016+y} ${562.78+x},${435.827-i*12.4016+y}`} />
      )
    }
    return arr
  }

  const accidental = () => {
    
  }
  
  return (
    <a href="#"
      onFocus={()=>setColor('blue')}
      onBlur={()=>setColor('black')}
    >
      {type==='quarter' &&
        <path
          className="Note"
          style={{fill: color}}
          onClick={()=>setColor('blue')}
          transform={`matrix(0.992126,0,0,0.992126,${521.863+x},${435.8264-step*12.4016+y})`} d="M31.5,-8.09375 C29.7031,-11.4063 25.9063,-13.2031 21.2969,-13.2031 C17.9063,-13.2031 14.2031,-12.2031 10.5938,-10.2969 C4,-6.79688 0,-0.90625 0,4.20313 C0,5.59375 0.296875,7 1,8.29688 C2.79688,11.5938 6.59375,13.2969 11.2031,13.2969 C14.5938,13.2969 18.2969,12.4063 21.9063,10.5 C28.5,7 32.5,1.09375 32.5,-4 C32.5,-5.40625 32.2031,-6.79688 31.5,-8.09375"
        />
      }
      {type==='half' &&
        <path
          className="Note"
          style={{fill: color}}
          onClick={()=>setColor('blue')}
          transform={`matrix(0.992126,0,0,0.992126,${521.863+x},${435.8264-step*12.4016+y})`} d="M31.5,-8.14063 C29.7031,-11.4375 25.9063,-13.2344 21.2969,-13.2344 C17.9063,-13.2344 14.2031,-12.2344 10.5938,-10.3438 C4,-6.84375 0,-0.9375 0,4.15625 C0,5.5625 0.296875,6.96875 1,8.26563 C2.79688,11.5781 6.59375,13.2813 11.2031,13.2813 C14.5938,13.2813 18.2969,12.375 21.9063,10.4844 C28.5,6.96875 32.5,1.0625 32.5,-4.04688 C32.5,-5.4375 32.2031,-6.84375 31.5,-8.14063 M27.2031,-1.34375 C25.5,0.359375 22.0938,2.45313 18.5,4.46875 C14.9063,6.46875 11.2969,7.96875 8.90625,8.46875 C8.40625,8.57813 7.90625,8.67188 7.40625,8.67188 C5.79688,8.67188 4.59375,8.07813 3.90625,6.76563 C3.59375,6.26563 3.40625,5.67188 3.40625,5.0625 C3.40625,3.96875 4.09375,2.65625 5.20313,1.5625 C6.90625,-0.140625 10.2031,-2.23438 13.7969,-4.23438 C17.4063,-6.23438 21,-7.73438 23.4063,-8.23438 C23.9063,-8.34375 24.4063,-8.4375 24.9063,-8.4375 C26.5,-8.4375 27.7969,-7.84375 28.5,-6.54688 C28.7969,-6.04688 28.9063,-5.4375 28.9063,-4.84375 C28.9063,-3.73438 28.2969,-2.54688 27.2031,-1.34375"
        />
      }
      {type==='whole' &&
        <path
          className="Note"
          style={{fill: color}}
          onClick={()=>setColor('blue')}
          transform={`matrix(0.992126,0,0,0.992126,${520+x},${435.8264-step*12.4016+y})`} d="M18.7031,-13.5938 C4.90625,-13.5938 0,-6.59375 0,-0.09375 C0,6.40625 4.90625,13.4063 18.7031,13.4063 C32.5,13.4063 37.2969,6.40625 37.2969,-0.09375 C37.2969,-6.59375 32.5,-13.5938 18.7031,-13.5938 M10.4063,-4.5 C10.2969,-4.90625 10.2969,-5.29688 10.2969,-5.70313 C10.2969,-6.5 10.5,-7.29688 10.9063,-8 C11.5938,-9 12.7969,-9.70313 14.2969,-10 C15.5938,-10.2969 16.2969,-10.5 18.9063,-10.5 L19,-10.5 C23,-10.5 24.2969,-6.79688 25.4063,-3 L25.7031,-2 C26.5,0.59375 26.9063,2.79688 26.9063,4.5 C26.9063,5.70313 26.7031,6.79688 26.2969,7.59375 C25.7031,8.70313 24.7031,9.40625 23,9.79688 C22.0938,10 20.5938,10.0938 20.5938,10.0938 C20.0938,10.0938 19.7031,10.2031 19.2969,10.2031 C16.0938,10.2031 14.0938,9 12.7031,4.70313 C11.5,1 11.2969,-0.09375 10.4063,-4.5"
        />
      }

      {/* render stem if present */}
      {(step < 0 && type!=='whole') &&
        // up stem
        <polyline
        className="Stem"
        onClick={()=>setColor('blue')}
        fill="none" stroke={color} strokeWidth="2.73" strokeLinejoin="bevel" points={`${552.735+x},${432.652-step*12.4016+y} ${552.735+x},${349.015-step*12.4016+y}`}
        />
      }
      {(step >= 0 && type!=='whole') &&
        // down stem
        <polyline class="Stem"
        onClick={()=>setColor('blue')}
        fill="none" stroke={color} stroke-width="2.73" stroke-linejoin="bevel" points={`${523.223+x},${439.16-step*12.4016+y} ${523.223+x},${513.337-step*12.4016+y}`} />
      }

      {/* render ledger line(s) if present */}
      {ledgerLines().map(item => item)}

      {/* render accidental if present */}

    </a>
  )
}

export default Note